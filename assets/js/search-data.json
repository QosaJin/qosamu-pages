{
  
    
        "post0": {
            "title": "IBM Quantum ExperienceとQiskitでベル状態を作って量子コンピューター実機で測定してみる",
            "content": "こんにちは。普段は機械学習のお仕事をしていますが、Amazon Braketに出会って量子コンピューターに興味津々になっています。 . はじめに . 最近、YouTubeで見れる慶應の量子コンピューターの集中講義（日本語）や2020年11月6日から始まったCERNのセミナー（英語）を見て勉強しています。 . 前者の講義は2005年に開催されたもので昨今の量子コンピューターブームとは関係なく淡々とNielsen &amp; Chuangの本を題材にした理論の解説をしていますが、後者はIBM Quantum ExperienceやQuirkでグラフィカルに量子回路を作りながらイメージしやすい解説がなされています。 . 扱っている題材自体も一部異なっていますし、後者は特に量子機械学習にも触れる予定のようなので、片方のコンテンツだけでなく相補的に観るといいんじゃないかと思っています。 . ベル状態 (Bell state) . さて、本稿ではCERNセミナーの第二回で扱われていたいわゆるベル状態 (Bell state) を作ってみます。コード自体も基本的にはCERNセミナーで紹介されていたこちらを利用します。 . ベル状態とは何かという話を最初にしておきます。 . 独立した2つの量子ビットがあるとき、その系の状態は$ vert 00 rangle$, $ vert 01 rangle$, $ vert 10 rangle$, $ vert 11 rangle$という4つの状態を基底にとった空間上で表されるでしょう。 . しかし当然基底の取り方は任意性があるので、上記の基底を回転させてそれぞれの状態が絡み合ったものを基底としても良いわけです。 . 特に $( vert 00 rangle + vert 11 rangle)/ sqrt{2}$, $( vert 00 rangle - vert 11 rangle)/ sqrt{2}$, $( vert 01 rangle + vert 10 rangle)/ sqrt{2}$, $( vert 01 rangle - vert 10 rangle)/ sqrt{2}$ の状態の基底をベル状態と呼びます。 . 後で見るように、これらの状態はアダマールゲート (Hadamard gate) とCNOT (Controlled NOT) ゲートを組み合わせることで実現できます。 . IBM Quantum Experience . IBM Quantum Experience はIBMが提供する量子コンピュータープラットフォームです。無料で量子コンピューターのシミュレーターや実機にアクセスできる優れものです。 . . Circuit Composerというサービスを使えば上図のようにGUI上でドラッグアンドドロップするだけでお手軽に量子回路を組み立てられます。また、IBM Quantum ExperienceではQuantum LabというマネージドのJupyter Notebook環境も使えます。ここではQuantum Lab上でQiskit (kiss-kitのように発音) というオープンソースの量子回路開発フレームワークを使ってベル状態を作ってみます。 . Qiskitを用いた量子回路の構築 . Qiskitを使って量子回路を構築するのはとても簡単です。まず qiskit.circuit.QuantumCircuit を使って量子ビットと古典ビットの数を指定します。今回は2量子ビットかつ測定用の2古典ビットを用意します。 . そして、0番目の量子ビットにアダマールゲート h を作用 (.h(0)) させ、0番目で制御されるCNOTゲートを1番目の量子ビットに作用 (.cx(0, 1)) させます。最後に、0番目の量子ビットを0番目の古典ビットで測定し、1番目の量子ビットを1番目の古典ビットで測定するという宣言 (.measure((0, 1), (0, 1))) をしてあげます 。 . %matplotlib inline from qiskit import QuantumCircuit, execute, Aer, IBMQ from qiskit.tools.monitor import backend_overview, backend_monitor, job_monitor from qiskit.visualization import plot_histogram # 2つの量子ビットと2つの古典ビット（測定用）からなる回路 circ_bell = QuantumCircuit(2, 2) circ_bell.h(0) # アダマールゲート circ_bell.cx(0, 1) # CNOTゲート circ_bell.measure((0, 1), (0, 1)) # 測定 circ_bell.draw(output=&#39;mpl&#39;) # 回路の描画 . .draw(output=&#39;mpl&#39;) で描画された回路は以下のようになります。 . . こちらの回路の測定を量子コンピューターのシミュレーターと実機で試してみましょう。 . Qiskit Aer シミュレーター . まずはQiskit Aerというシミュレーターを使って計算します。 . Qiskit AerではQasmSimulator や StatevectorSimulator など利用用途が異なるバックエンドが複数用意されています。QasmSimulator は実機を模したシミュレーターであり出力はカウント数などですが、StatevectorSimulator では終状態のベクトルを得ることができます。 . QasmSimulator を使った測定と結果は以下の通りです。 . # QasmSimulatorバックエンドを取得 backend = Aer.get_backend(&#39;qasm_simulator&#39;) # circ_bellをQasmSimulatorで1000回測定 job = execute(circ_bell, backend, shots=1000) # 測定結果の取得 counts = job.result().get_counts() print(counts) # &gt;&gt;&gt; {&#39;00&#39;: 493, &#39;11&#39;: 507} . 量子コンピューターでは出力は確率的に決まるものであり、一回測定するだけでは求めたい結果が得られません。（もちろん理想的には測定したら必ず0が出力される、といった状態を作ることもできますが、実機ではノイズもあるので結局複数回の測定は必要になるかと思います。） . ここでは1000回同じ測定を行い、両方のビットが0、もしくは1である確率が大体半々であるという結果が得られました。（測定回数（ショット数）をさらに増やせば誤差は小さくなっていくでしょう。） . 初期状態が $ vert 00 rangle$ の場合、上記の回路に通すと終状態は $( vert 00 rangle + vert 11 rangle)/ sqrt{2}$ になりますので、00と11が半々というのは期待通りの結果が得られたことになります。 . IBM Quantum Experienceで使える量子コンピューター . では、次に量子コンピューター実機で試してみましょう。 . その前にIBM Quantum Experienceではどんな量子コンピューターが用意されているかを確認しましょう。 . （なお、以下のコードはマネージドJupyter NotebookのQuantum Lab上であれば問題なく動作するはずですが、ローカルで同じコードを実行しようとするとIBM Quantum Experienceのクレデンシャルを求められると思います。） . provider = IBMQ.load_account() backend_overview() . 出力は以下のようになります。それぞれのパラメーターの意味は次のようになります。 . それぞれの量子コンピューターの名前 | 用いることのできる量子ビットの数 (Num. Qubits) | 現在キューに溜まってるジョブ数 (Pending Jobs) | 一番空いているか否か (Least busy) | 運転中か否か (Operational) | $ vert 1 rangle$ が $ vert 0 rangle$ にdecayしてしまうまでの平均時間 (Avg. T1) [$ mu$s] | 量子もつれの状態が解消してしまうまでの平均時間 (Avg. T2) [$ mu$s] | . ibmq_santiago ibmq_athens ibmq_armonk - -- -- Num. Qubits: 5 Num. Qubits: 5 Num. Qubits: 1 Pending Jobs: 25 Pending Jobs: 8 Pending Jobs: 1 Least busy: False Least busy: False Least busy: True Operational: True Operational: True Operational: True Avg. T1: 152.4 Avg. T1: 66.7 Avg. T1: 157.9 Avg. T2: 113.5 Avg. T2: 84.3 Avg. T2: 190.0 ibmq_valencia ibmq_ourense ibmq_vigo - Num. Qubits: 5 Num. Qubits: 5 Num. Qubits: 5 Pending Jobs: 105 Pending Jobs: 18 Pending Jobs: 53 Least busy: False Least busy: False Least busy: False Operational: True Operational: True Operational: True Avg. T1: 90.0 Avg. T1: 98.2 Avg. T1: 122.8 Avg. T2: 52.9 Avg. T2: 71.8 Avg. T2: 85.1 ibmqx2 ibmq_16_melbourne -- Num. Qubits: 5 Num. Qubits: 15 Pending Jobs: 912 Pending Jobs: 1279 Least busy: False Least busy: False Operational: True Operational: False Avg. T1: 54.3 Avg. T1: 55.2 Avg. T2: 38.1 Avg. T2: 59.4 . それぞれの量子コンピューターの仕様の詳細を見るには qiskit.tools.backend_monitor を用います。 . backend_monitor(provider.get_backend(&quot;ibmq_valencia&quot;)) . 出力は以下のようになります。表示は指定されたバックエンドの名前によって変化します。 . ibmq_valencia ============= Configuration - n_qubits: 5 operational: True status_msg: active pending_jobs: 0 backend_version: 1.4.0 basis_gates: [&#39;id&#39;, &#39;u1&#39;, &#39;u2&#39;, &#39;u3&#39;, &#39;cx&#39;] local: False simulator: False meas_levels: [1, 2] parametric_pulses: [&#39;gaussian&#39;, &#39;gaussian_square&#39;, &#39;drag&#39;, &#39;constant&#39;] dtm: 2.222222222222222e-19 credits_required: True dt: 2.222222222222222e-19 max_shots: 8192 meas_map: [[0, 1, 2, 3, 4]] n_registers: 1 max_experiments: 75 memory: True uchannels_enabled: True ...（以下略） . ちなみにIBM Quantum Experienceのトップページの右側にあるバックエンドのリストをクリックすると綺麗なトポロジーのグラフや詳細のパラメーターを確認することもできます。 . . 量子コンピューター実機を使った測定 . 前置きが長くなりましたが、量子コンピューター実機を使った測定をしてみましょう。 . 上記の Pending Jobs のパラメーターの説明からもわかるように、IBM Quantum Experienceの量子コンピューターは順番待ちで利用するものです。 . いちいち空いているバックエンドを探して指定するのは大変ですが、実は least_busy という関数を使うと一番空いているバックエンドを選択してくれます。便利ですね。 . provider.backends に条件を入れて least_busy で囲ってあげれば、条件に合うの中から空いているものが選ばれます。 . from qiskit.providers.ibmq import least_busy # We execute on the least busy device (among the actual quantum computers) backend = least_busy( provider.backends( operational=True, # 稼働中のバックエンド simulator=False, # シミュレーターでなく実機 status_msg=&#39;active&#39;, filters=lambda x: x.configuration().n_qubits &gt; 1 # 量子ビット数が2以上 ) ) # 選択されたバックエンドの名前を表示 print(&quot;We are executing on...&quot;, backend) # 待ち状態のジョブ数を表示 print(&quot;It has&quot;, backend.status().pending_jobs, &quot;pending jobs&quot;) job_exp = execute(circ_bell, backend=backend) # shot数のデフォルトは1,024回 job_monitor(job_exp) # &gt;&gt;&gt; # We are executing on... ibmq_athens # It has 9 pending jobs # Job Status: job has successfully run . 今回は ibmq_athens という実機の量子コンピューターが選択されました。私の前に9個のジョブが溜まっていましたが、10分程度待ったらジョブが実行されました。 . シミュレーターと実機の比較 . 最後に実機で得られた測定結果をプロットし、QasmSimulator の結果を比較してみます。 . result_exp = job_exp.result() counts_exp = result_exp.get_counts(circ_bell) plot_histogram([counts_exp, counts], legend=[&#39;Device&#39;, &#39;Simulator&#39;]) . . 横軸は測定結果のビットで、縦軸がそれぞれの確率を表しています。青色が実機で赤色がシミュレーターの測定結果です。 . 期待通り、量子コンピューター実機でも 00 と 11 の状態が半々であるという結果になりました。 しかし、実機では多少 01 や 10 の結果も含まれてしまっています。これは実機におけるゲート操作のエラーや測定の誤差に起因するものでしょう。 今回は QasmSimulator にノイズの設定をしなかったので、シミュレーター上では理想的な 00/11 のみの状態が再現されていました。 . まとめ . 今回はIBM Quantum ExperienceのマネージドJupyter NotebookサービスであるQuantum Lab上で量子回路を構築してみました。 . アダマールゲートとCNOTゲートを用いて、ベル状態のひとつ $( vert 00 rangle + vert 11 rangle)/ sqrt{2}$ を作る回路をQiskitで構築しました。 . シミュレーターと実機で測定をしたところ、出力はほとんど 00 もしくは 11 となり、期待された状態が得られていることがわかりました。 . least_busy 関数を用いることでIBMが提供する量子コンピューターのうち一番空いているものを取得する方法に関しても解説しました。 .",
            "url": "https://qosajin.github.io/qosamu-pages/qiskit/ibm/2021/08/29/bell-measurement-with-qiskit.html",
            "relUrl": "/qiskit/ibm/2021/08/29/bell-measurement-with-qiskit.html",
            "date": " • Aug 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://qosajin.github.io/qosamu-pages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://qosajin.github.io/qosamu-pages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://qosajin.github.io/qosamu-pages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://qosajin.github.io/qosamu-pages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}