{
  
    
        "post0": {
            "title": "Qiskit で量子コンピュータの実機を動かしてみる",
            "content": "&#12399;&#12376;&#12417;&#12395; . 今回は IBM Quantum が提供している実機を動かしてみようと思います。 IBM Quantum では現在、無料アカウントを作れば 5 qubit (量子ビット) までの実機を走らせることができます。 どんな実機があるかはここで確認できます。 鍵マークのついていないものが無料アカウントでも使えるものですね。 ibmq_brooklyn や ibmq_manhattan の 65 qubit というのが現在の最大のようです。IBM Quantum Network という有償サービス？に入ればそれらも使えるようです。主に大学などの研究機関や企業が参加してるようです。 . &#28310;&#20633; . IBM Quantum にアクセスして Web から動かすのは簡単ですが、僕は local 環境から Python を使って動かしたいので、前回準備した local 環境で Jupyter Notebook を立ち上げて動かしてみます。 . その前に、実機のアクセスには API token が必要なので、IBM Quantum の dashboard ページ にアクセスし、コピーしておきます。 . &#37327;&#23376;&#22238;&#36335;&#12398;&#20316;&#25104; . 実機で動かしたい量子回路 (Quantum Circuit) を作成します。ここは実機の場合もシミュレータの場合も同様なので、前回使ったのと同じ回路を作っておきます。2量子ビットを使い、片方に Hadamard gate をかけ、その後 control-NOT gate をかけて両方の量子ビットを測定するだけの回路です。前回のシミューレータの結果からわかる通りこれは $|00&gt;$ と $|11&gt;$ という2つの状態の重ね合わせで、それぞれの量子ビットの内積で表現できないので (それぞれの量子ビットが互いに依存しているので) 「量子もつれ」と言われる状態です。 . 最近知ったのですが、circuit を draw するときに &#39;mpl&#39; (matplotlib) という引数を入れて実行すると、text ではなくちょっとかっこいい image 形式で量子回路を出力できます。 . from qiskit import * # from qiskit.visualization import plot_histogram circuit = QuantumCircuit(2, 2) circuit.h(0) circuit.cx(0, 1) circuit.measure([0,1], [0,1]) circuit.draw(&#39;mpl&#39;) . &#23455;&#27231;&#12408;&#12398;&#12450;&#12463;&#12475;&#12473; . 量子回路を準備したら、実機へのアクセスをしてみます。 以下では、上でコピーした API token を mytoken という変数に入れ、それを使って save_acount を実行しています。 . from getpass import getpass mytoken = getpass(prompt = &#39;My Token: &#39;) IBMQ.save_account(token=mytoken) . My Token: ········ . そうすると、local Mac 上に ~/.qiskit/qiskitrc というファイルが作成され、token が保存されます。この save_acount は token が変わったり、PC/Mac が変わらない限り一度実行しておけば OK です。 . $ cat ~/.qiskit/qiskitrc [ibmq] token = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX url = https://auth.quantum-computing.ibm.com/api verify = True . アカウントの準備ができたら使用可能な実機を探します。IBMQ.load_acount で IBMQ にログインし、IBMQ.get_provider(&quot;ibm-q&quot;) で ibm-q の provider (実機) の情報？を取得します。 Qiskit textbook でよく出てくる方法ですが、その後、least_busy という関数を使って条件に合う実機のうち、最も暇な (queue に入ってる job の少ない) 実機を見つけます。 ここでは3つの条件を指定してます。 . x.configuration().n_qubits &gt;= 2: 量子ビットの数が2以上 | x.configuration().simulator: シミュレータじゃない (= 実機) | x.status().operational==True: 今動いてる奴 | . from qiskit.providers.ibmq import least_busy provider = IBMQ.load_account() provider = IBMQ.get_provider(&quot;ibm-q&quot;) backend = least_busy(provider.backends(filters=lambda x: x.configuration().n_qubits &gt;= 2 and not x.configuration().simulator and x.status().operational==True)) print(&quot;Running on current least busy device: &quot;, backend) . Running on current least busy device: ibmq_quito . これを実行した時点では ibmq_quito というのが一番暇だったようなので、これを使います！ qiskit.providers.ibmq.jupyter という module を import して backend device 情報を見ると、GUI でカチカチと実機情報 (量子ビット数とか、エラーの大きさとか、) を見れます！ . import qiskit.providers.ibmq.jupyter backend . &lt;IBMQBackend(&#39;ibmq_quito&#39;) from IBMQ(hub=&#39;ibm-q&#39;, group=&#39;open&#39;, project=&#39;main&#39;)&gt; . &#23455;&#27231;&#12434;&#36208;&#12425;&#12379;&#12427;&#65281; . ここまで来たらあとは走らせて結果を見ます。execute で quantum circuit, backend, shots (試行回数) を指定して実機を動かします。 実機動作の状況は job_monitor を実行しておくと逐一確認ができて、&quot;Job Status: job has successfully run&quot; と出てきたら完了です！ . from qiskit.tools.monitor import job_monitor job = execute(circuit, backend, shots=8192) job_monitor(job) . Job Status: job has successfully run . 結果を見てみます。実機を走らせた後のデータの処理方法はシミュレータの場合と同様です。 . from qiskit.visualization import plot_histogram counts = job.result().get_counts() plot_histogram(counts) . シミュレータでは期待された $|00&gt;$ と $|11&gt;$ の状態がそれぞれ約50%の確率で発生しているのがばっちり見えましたが、実機の場合はそれ以外の &#39;01&#39; や &#39;10&#39; という結果も数%ずつ入ってしまいました。これは実機特有のエラーが原因です。この辺りのエラーも定量的に検証できると面白そうだな、と思っています。 今回はここまで！ . Version &#24773;&#22577; . import qiskit.tools.jupyter %qiskit_version_table . Version Information . Qiskit SoftwareVersion . qiskit-terra | 0.18.1 | . qiskit-aer | 0.8.2 | . qiskit-ignis | 0.6.0 | . qiskit-ibmq-provider | 0.16.0 | . qiskit-aqua | 0.9.4 | . qiskit | 0.29.0 | . System information . Python | 3.9.6 (default, Aug 18 2021, 12:38:10) [Clang 10.0.0 ] | . OS | Darwin | . CPUs | 6 | . Memory (Gb) | 16.0 | . Sun Sep 05 23:23:56 2021 JST | .",
            "url": "https://qosajin.github.io/qosamu-pages/jupyter/qiskit/2021/09/05/run-ibm-quantum-real-device.html",
            "relUrl": "/jupyter/qiskit/2021/09/05/run-ibm-quantum-real-device.html",
            "date": " • Sep 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Qiskit のローカル環境セットアップをしてみる",
            "content": "&#12399;&#12376;&#12417;&#12395; . 最近 (主に) Qiskit を使って量子コンピュータの勉強をしています。Qiskit は IBM が開発した量子コンピューティング用の python library で、Software 上で量子回路を作り、それをシミュレータ (古典コンピュータ上で量子計算を行なう) で動かしたり、実機で動かして検証することができます。 ちょっと試してみるとか、予め用意されたサンプルコードを手っ取り早く動かしたいという場合は IBM Quantum でアカウントを作り、そのままクラウド上で動かすと良いです。 . ただし、サーバ側のご機嫌が悪い時はアクセスに時間がかかったり、そもそもアクセスできないこともあるし、ある程度 Qiskit を使ってコードを書けるようになったりした場合にはローカル環境で使えると便利です。そこで今回は Qiskit のローカル環境セットアップ時の手順のメモを残しておきます。 . &#28310;&#20633; . 今回は macOS Big Sur (Version 11.4) でインストールしています。 Qiskit documentation の Getting Started -&gt; Installation -&gt; Start locally を参照しました。 前準備としてドキュメントにある通り、conda で python のパッケージ管理をすることにしました。 あまり大きなパッケージをインストールしたくなかったので、Miniconda をインストールしました。Python の version は 3.9 です。 . conda &#12391; Qiskit &#29992;&#12398;&#29872;&#22659;&#12434;&#29992;&#24847; . まずは conda で Qiskit 用の環境 &#39;Qiskit&#39; を用意します。 . (base) tsubasa-cc$ conda create -n Qiskit python=3 -- snip -- The following NEW packages will be INSTALLED: ca-certificates pkgs/main/osx-64::ca-certificates-2021.7.5-hecd8cb5_1 certifi pkgs/main/osx-64::certifi-2021.5.30-py39hecd8cb5_0 libcxx pkgs/main/osx-64::libcxx-10.0.0-1 libffi pkgs/main/osx-64::libffi-3.3-hb1e8313_2 ncurses pkgs/main/osx-64::ncurses-6.2-h0a44026_1 openssl pkgs/main/osx-64::openssl-1.1.1k-h9ed2024_0 pip pkgs/main/osx-64::pip-21.2.4-py37hecd8cb5_0 python pkgs/main/osx-64::python-3.9.6-h88f2d9e_1 readline pkgs/main/osx-64::readline-8.1-h9ed2024_0 setuptools pkgs/main/osx-64::setuptools-52.0.0-py39hecd8cb5_0 sqlite pkgs/main/osx-64::sqlite-3.36.0-hce871da_0 tk pkgs/main/osx-64::tk-8.6.10-hb0a8c7a_0 tzdata pkgs/main/noarch::tzdata-2021a-h5d7bf9c_0 wheel pkgs/main/noarch::wheel-0.37.0-pyhd3eb1b0_0 xz pkgs/main/osx-64::xz-5.2.5-h1de35cc_0 zlib pkgs/main/osx-64::zlib-1.2.11-h1de35cc_3 Proceed ([y]/n)? y -- snip -- # # To activate this environment, use # # $ conda activate Qiskit # # To deactivate an active environment, use # # $ conda deactivate . create できたら、activate します。 . (base) tsubasa-cc$ conda activate Qiskit (Qiskit) tsubasa-cc$ . activate すると、プロンプトの左端が設定した環境名 &#39;Qiskit&#39; に変わります。この &#39;Qiskit&#39; 環境の中で必要なものをインストールしていきます。 . qiskit &#12398;&#12452;&#12531;&#12473;&#12488;&#12540;&#12523; . pip は conda create でインストール済みなので、あとは pip install qiskit で qiskit をインストールします。 . (Qiskit) tsubasa-cc$ pip install qiskit Collecting qiskit Downloading qiskit-0.29.0.tar.gz (12 kB) Collecting qiskit-terra==0.18.1 Downloading qiskit_terra-0.18.1-cp39-cp39-macosx_10_9_x86_64.whl (5.3 MB) -- snip -- Successfully installed attrs-21.2.0 cffi-1.14.6 charset-normalizer-2.0.4 cryptography-3.4.7 dill-0.3.4 dlx-1.0.4 docplex-2.21.207 fastdtw-0.3.4 fastjsonschema-2.15.1 h5py-3.2.1 idna-3.2 inflection-0.5.1 joblib-1.0.1 jsonschema-3.2.0 lxml-4.6.3 more-itertools-8.8.0 mpmath-1.2.1 multitasking-0.0.9 ntlm-auth-1.5.0 numpy-1.21.2 pandas-1.3.2 ply-3.11 psutil-5.8.0 pybind11-2.7.1 pycparser-2.20 pyrsistent-0.18.0 python-constraint-1.4.0 python-dateutil-2.8.2 pytz-2021.1 qiskit-0.29.0 qiskit-aer-0.8.2 qiskit-aqua-0.9.4 qiskit-ibmq-provider-0.16.0 qiskit-ignis-0.6.0 qiskit-terra-0.18.1 quandl-3.6.1 requests-2.26.0 requests-ntlm-1.1.0 retworkx-0.9.0 scikit-learn-0.24.2 scipy-1.7.1 six-1.16.0 symengine-0.7.2 sympy-1.8 threadpoolctl-2.2.0 tweedledum-1.1.0 urllib3-1.26.6 websocket-client-1.2.1 yfinance-0.1.62 . Successfully installed ... と出れば完了です。qiskit だけでなく、qiskit を利用するのに標準で使うパッケージ達もインストールし手くれるようです。 Python/Qiskit を CLI のみで使うならばこれだけで良いのですが、Jupyter Notebook で動かすのが色々と便利なので、その場合は [visualization] のサポートも必要です。 . (Qiskit) tsubasa-cc$ pip install qiskit[visualization] -- snip -- Successfully built pylatexenc Installing collected packages: ipython-genutils, traitlets, wcwidth, tornado, pyzmq, pyparsing, ptyprocess, parso, nest-asyncio, jupyter-core, entrypoints, webencodings, pygments, prompt-toolkit, pickleshare, pexpect, packaging, nbformat, matplotlib-inline, MarkupSafe, jupyter-client, jedi, decorator, backcall, appnope, testpath, pandocfilters, nbclient, mistune, jupyterlab-pygments, jinja2, ipython, defusedxml, debugpy, bleach, terminado, Send2Trash, prometheus-client, nbconvert, ipykernel, argon2-cffi, pillow, notebook, kiwisolver, cycler, widgetsnbextension, matplotlib, jupyterlab-widgets, seaborn, pylatexenc, pydot, ipywidgets Successfully installed MarkupSafe-2.0.1 Send2Trash-1.8.0 appnope-0.1.2 argon2-cffi-20.1.0 backcall-0.2.0 bleach-4.0.0 cycler-0.10.0 debugpy-1.4.1 decorator-5.0.9 defusedxml-0.7.1 entrypoints-0.3 ipykernel-6.2.0 ipython-7.26.0 ipython-genutils-0.2.0 ipywidgets-7.6.3 jedi-0.18.0 jinja2-3.0.1 jupyter-client-7.0.1 jupyter-core-4.7.1 jupyterlab-pygments-0.1.2 jupyterlab-widgets-1.0.0 kiwisolver-1.3.1 matplotlib-3.4.3 matplotlib-inline-0.1.2 mistune-0.8.4 nbclient-0.5.4 nbconvert-6.1.0 nbformat-5.1.3 nest-asyncio-1.5.1 notebook-6.4.3 packaging-21.0 pandocfilters-1.4.3 parso-0.8.2 pexpect-4.8.0 pickleshare-0.7.5 pillow-8.3.1 prometheus-client-0.11.0 prompt-toolkit-3.0.20 ptyprocess-0.7.0 pydot-1.4.2 pygments-2.10.0 pylatexenc-2.10 pyparsing-2.4.7 pyzmq-22.2.1 seaborn-0.11.2 terminado-0.11.1 testpath-0.5.0 tornado-6.1 traitlets-5.0.5 wcwidth-0.2.5 webencodings-0.5.1 widgetsnbextension-3.5.1 . これで、Jupyter 関連や matplotlib (結果をプロットするのに多用する！) などのインストールも完了しました！ . Qiskit &#12434;&#35430;&#12375;&#12390;&#12415;&#12427;&#65281; . 早速 Qiskit を試しに使ってみましょう。ここでは Qiskit Documentation にある [Introduction to Qiskit] のコードをそのまま動かしてみます。 まずはターミナルで jupyter-notebook を実行すると Jupyter Notebook が起動してブラウザが自動で開くので、新しいファイルを開きます。 そこでとりあえず Introduction to Qiskit のある以下のコードをコピペして実行してみます。 . import numpy as np from qiskit import QuantumCircuit, transpile from qiskit.providers.aer import QasmSimulator from qiskit.visualization import plot_histogram # Use Aer&#39;s qasm_simulator simulator = QasmSimulator() # Create a Quantum Circuit acting on the q register circuit = QuantumCircuit(2, 2) # Add a H gate on qubit 0 circuit.h(0) # Add a CX (CNOT) gate on control qubit 0 and target qubit 1 circuit.cx(0, 1) # Map the quantum measurement to the classical bits circuit.measure([0,1], [0,1]) # compile the circuit down to low-level QASM instructions # supported by the backend (not needed for simple circuits) compiled_circuit = transpile(circuit, simulator) # Execute the circuit on the qasm simulator job = simulator.run(compiled_circuit, shots=1000) # Grab results from the job result = job.result() # Returns counts counts = result.get_counts(compiled_circuit) print(&quot; nTotal count for 00 and 11 are:&quot;,counts) # Draw the circuit circuit.draw() . Total count for 00 and 11 are: {&#39;11&#39;: 510, &#39;00&#39;: 490} . ┌───┐ ┌─┐ q_0: ┤ H ├──■──┤M├─── └───┘┌─┴─┐└╥┘┌─┐ q_1: ─────┤ X ├─╫─┤M├ └───┘ ║ └╥┘ c: 2/═══════════╩══╩═ 0 1 . すると何やら量子回路が作成できました！ そしてこれまたコピペで plot_histogram してみます。 . plot_histogram(counts) . ヒストグラムも描画できました！ &#39;00&#39; と &#39;11&#39; の2つの状態がおおよそ半々ずつの状態ということでしょうね。 今回はコードの中身には深入りしません。今後1つずつ見ていこうかと思います。 . Version &#24773;&#22577; . 最後に、Qiskit のドキュメントに倣って、qiskit/python/OS などの version 情報を載せておきます。 以下を実行するだけで表形式で綺麗に出してくれます。便利ですね。 . import qiskit.tools.jupyter %qiskit_version_table . Version Information . Qiskit SoftwareVersion . qiskit-terra | 0.18.1 | . qiskit-aer | 0.8.2 | . qiskit-ignis | 0.6.0 | . qiskit-ibmq-provider | 0.16.0 | . qiskit-aqua | 0.9.4 | . qiskit | 0.29.0 | . System information . Python | 3.9.6 (default, Aug 18 2021, 12:38:10) [Clang 10.0.0 ] | . OS | Darwin | . CPUs | 6 | . Memory (Gb) | 16.0 | . Mon Aug 30 22:42:58 2021 JST | .",
            "url": "https://qosajin.github.io/qosamu-pages/jupyter/conda/qiskit/2021/08/31/qiskit-local-installation.html",
            "relUrl": "/jupyter/conda/qiskit/2021/08/31/qiskit-local-installation.html",
            "date": " • Aug 31, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "IBM Quantum ExperienceとQiskitでベル状態を作って量子コンピューター実機で測定してみる",
            "content": "こんにちは。普段は機械学習のお仕事をしていますが、Amazon Braketに出会って量子コンピューターに興味津々になっています。 . はじめに . 最近、YouTubeで見れる慶應の量子コンピューターの集中講義（日本語）や2020年11月6日から始まったCERNのセミナー（英語）を見て勉強しています。 . 前者の講義は2005年に開催されたもので昨今の量子コンピューターブームとは関係なく淡々とNielsen &amp; Chuangの本を題材にした理論の解説をしていますが、後者はIBM Quantum ExperienceやQuirkでグラフィカルに量子回路を作りながらイメージしやすい解説がなされています。 . 扱っている題材自体も一部異なっていますし、後者は特に量子機械学習にも触れる予定のようなので、片方のコンテンツだけでなく相補的に観るといいんじゃないかと思っています。 . ベル状態 (Bell state) . さて、本稿ではCERNセミナーの第二回で扱われていたいわゆるベル状態 (Bell state) を作ってみます。コード自体も基本的にはCERNセミナーで紹介されていたこちらを利用します。 . ベル状態とは何かという話を最初にしておきます。 . 独立した2つの量子ビットがあるとき、その系の状態は$ vert 00 rangle$, $ vert 01 rangle$, $ vert 10 rangle$, $ vert 11 rangle$という4つの状態を基底にとった空間上で表されるでしょう。 . しかし当然基底の取り方は任意性があるので、上記の基底を回転させてそれぞれの状態が絡み合ったものを基底としても良いわけです。 . 特に $( vert 00 rangle + vert 11 rangle)/ sqrt{2}$, $( vert 00 rangle - vert 11 rangle)/ sqrt{2}$, $( vert 01 rangle + vert 10 rangle)/ sqrt{2}$, $( vert 01 rangle - vert 10 rangle)/ sqrt{2}$ の状態の基底をベル状態と呼びます。 . 後で見るように、これらの状態はアダマールゲート (Hadamard gate) とCNOT (Controlled NOT) ゲートを組み合わせることで実現できます。 . IBM Quantum Experience . IBM Quantum Experience はIBMが提供する量子コンピュータープラットフォームです。無料で量子コンピューターのシミュレーターや実機にアクセスできる優れものです。 . . Circuit Composerというサービスを使えば上図のようにGUI上でドラッグアンドドロップするだけでお手軽に量子回路を組み立てられます。また、IBM Quantum ExperienceではQuantum LabというマネージドのJupyter Notebook環境も使えます。ここではQuantum Lab上でQiskit (kiss-kitのように発音) というオープンソースの量子回路開発フレームワークを使ってベル状態を作ってみます。 . Qiskitを用いた量子回路の構築 . Qiskitを使って量子回路を構築するのはとても簡単です。まず qiskit.circuit.QuantumCircuit を使って量子ビットと古典ビットの数を指定します。今回は2量子ビットかつ測定用の2古典ビットを用意します。 . そして、0番目の量子ビットにアダマールゲート h を作用 (.h(0)) させ、0番目で制御されるCNOTゲートを1番目の量子ビットに作用 (.cx(0, 1)) させます。最後に、0番目の量子ビットを0番目の古典ビットで測定し、1番目の量子ビットを1番目の古典ビットで測定するという宣言 (.measure((0, 1), (0, 1))) をしてあげます 。 . %matplotlib inline from qiskit import QuantumCircuit, execute, Aer, IBMQ from qiskit.tools.monitor import backend_overview, backend_monitor, job_monitor from qiskit.visualization import plot_histogram # 2つの量子ビットと2つの古典ビット（測定用）からなる回路 circ_bell = QuantumCircuit(2, 2) circ_bell.h(0) # アダマールゲート circ_bell.cx(0, 1) # CNOTゲート circ_bell.measure((0, 1), (0, 1)) # 測定 circ_bell.draw(output=&#39;mpl&#39;) # 回路の描画 . .draw(output=&#39;mpl&#39;) で描画された回路は以下のようになります。 . . こちらの回路の測定を量子コンピューターのシミュレーターと実機で試してみましょう。 . Qiskit Aer シミュレーター . まずはQiskit Aerというシミュレーターを使って計算します。 . Qiskit AerではQasmSimulator や StatevectorSimulator など利用用途が異なるバックエンドが複数用意されています。QasmSimulator は実機を模したシミュレーターであり出力はカウント数などですが、StatevectorSimulator では終状態のベクトルを得ることができます。 . QasmSimulator を使った測定と結果は以下の通りです。 . # QasmSimulatorバックエンドを取得 backend = Aer.get_backend(&#39;qasm_simulator&#39;) # circ_bellをQasmSimulatorで1000回測定 job = execute(circ_bell, backend, shots=1000) # 測定結果の取得 counts = job.result().get_counts() print(counts) # &gt;&gt;&gt; {&#39;00&#39;: 493, &#39;11&#39;: 507} . 量子コンピューターでは出力は確率的に決まるものであり、一回測定するだけでは求めたい結果が得られません。（もちろん理想的には測定したら必ず0が出力される、といった状態を作ることもできますが、実機ではノイズもあるので結局複数回の測定は必要になるかと思います。） . ここでは1000回同じ測定を行い、両方のビットが0、もしくは1である確率が大体半々であるという結果が得られました。（測定回数（ショット数）をさらに増やせば誤差は小さくなっていくでしょう。） . 初期状態が $ vert 00 rangle$ の場合、上記の回路に通すと終状態は $( vert 00 rangle + vert 11 rangle)/ sqrt{2}$ になりますので、00と11が半々というのは期待通りの結果が得られたことになります。 . IBM Quantum Experienceで使える量子コンピューター . では、次に量子コンピューター実機で試してみましょう。 . その前にIBM Quantum Experienceではどんな量子コンピューターが用意されているかを確認しましょう。 . （なお、以下のコードはマネージドJupyter NotebookのQuantum Lab上であれば問題なく動作するはずですが、ローカルで同じコードを実行しようとするとIBM Quantum Experienceのクレデンシャルを求められると思います。） . provider = IBMQ.load_account() backend_overview() . 出力は以下のようになります。それぞれのパラメーターの意味は次のようになります。 . それぞれの量子コンピューターの名前 | 用いることのできる量子ビットの数 (Num. Qubits) | 現在キューに溜まってるジョブ数 (Pending Jobs) | 一番空いているか否か (Least busy) | 運転中か否か (Operational) | $ vert 1 rangle$ が $ vert 0 rangle$ にdecayしてしまうまでの平均時間 (Avg. T1) [$ mu$s] | 量子もつれの状態が解消してしまうまでの平均時間 (Avg. T2) [$ mu$s] | . ibmq_santiago ibmq_athens ibmq_armonk - -- -- Num. Qubits: 5 Num. Qubits: 5 Num. Qubits: 1 Pending Jobs: 25 Pending Jobs: 8 Pending Jobs: 1 Least busy: False Least busy: False Least busy: True Operational: True Operational: True Operational: True Avg. T1: 152.4 Avg. T1: 66.7 Avg. T1: 157.9 Avg. T2: 113.5 Avg. T2: 84.3 Avg. T2: 190.0 ibmq_valencia ibmq_ourense ibmq_vigo - Num. Qubits: 5 Num. Qubits: 5 Num. Qubits: 5 Pending Jobs: 105 Pending Jobs: 18 Pending Jobs: 53 Least busy: False Least busy: False Least busy: False Operational: True Operational: True Operational: True Avg. T1: 90.0 Avg. T1: 98.2 Avg. T1: 122.8 Avg. T2: 52.9 Avg. T2: 71.8 Avg. T2: 85.1 ibmqx2 ibmq_16_melbourne -- Num. Qubits: 5 Num. Qubits: 15 Pending Jobs: 912 Pending Jobs: 1279 Least busy: False Least busy: False Operational: True Operational: False Avg. T1: 54.3 Avg. T1: 55.2 Avg. T2: 38.1 Avg. T2: 59.4 . それぞれの量子コンピューターの仕様の詳細を見るには qiskit.tools.backend_monitor を用います。 . backend_monitor(provider.get_backend(&quot;ibmq_valencia&quot;)) . 出力は以下のようになります。表示は指定されたバックエンドの名前によって変化します。 . ibmq_valencia ============= Configuration - n_qubits: 5 operational: True status_msg: active pending_jobs: 0 backend_version: 1.4.0 basis_gates: [&#39;id&#39;, &#39;u1&#39;, &#39;u2&#39;, &#39;u3&#39;, &#39;cx&#39;] local: False simulator: False meas_levels: [1, 2] parametric_pulses: [&#39;gaussian&#39;, &#39;gaussian_square&#39;, &#39;drag&#39;, &#39;constant&#39;] dtm: 2.222222222222222e-19 credits_required: True dt: 2.222222222222222e-19 max_shots: 8192 meas_map: [[0, 1, 2, 3, 4]] n_registers: 1 max_experiments: 75 memory: True uchannels_enabled: True ...（以下略） . ちなみにIBM Quantum Experienceのトップページの右側にあるバックエンドのリストをクリックすると綺麗なトポロジーのグラフや詳細のパラメーターを確認することもできます。 . . 量子コンピューター実機を使った測定 . 前置きが長くなりましたが、量子コンピューター実機を使った測定をしてみましょう。 . 上記の Pending Jobs のパラメーターの説明からもわかるように、IBM Quantum Experienceの量子コンピューターは順番待ちで利用するものです。 . いちいち空いているバックエンドを探して指定するのは大変ですが、実は least_busy という関数を使うと一番空いているバックエンドを選択してくれます。便利ですね。 . provider.backends に条件を入れて least_busy で囲ってあげれば、条件に合うの中から空いているものが選ばれます。 . from qiskit.providers.ibmq import least_busy # We execute on the least busy device (among the actual quantum computers) backend = least_busy( provider.backends( operational=True, # 稼働中のバックエンド simulator=False, # シミュレーターでなく実機 status_msg=&#39;active&#39;, filters=lambda x: x.configuration().n_qubits &gt; 1 # 量子ビット数が2以上 ) ) # 選択されたバックエンドの名前を表示 print(&quot;We are executing on...&quot;, backend) # 待ち状態のジョブ数を表示 print(&quot;It has&quot;, backend.status().pending_jobs, &quot;pending jobs&quot;) job_exp = execute(circ_bell, backend=backend) # shot数のデフォルトは1,024回 job_monitor(job_exp) # &gt;&gt;&gt; # We are executing on... ibmq_athens # It has 9 pending jobs # Job Status: job has successfully run . 今回は ibmq_athens という実機の量子コンピューターが選択されました。私の前に9個のジョブが溜まっていましたが、10分程度待ったらジョブが実行されました。 . シミュレーターと実機の比較 . 最後に実機で得られた測定結果をプロットし、QasmSimulator の結果を比較してみます。 . result_exp = job_exp.result() counts_exp = result_exp.get_counts(circ_bell) plot_histogram([counts_exp, counts], legend=[&#39;Device&#39;, &#39;Simulator&#39;]) . . 横軸は測定結果のビットで、縦軸がそれぞれの確率を表しています。青色が実機で赤色がシミュレーターの測定結果です。 . 期待通り、量子コンピューター実機でも 00 と 11 の状態が半々であるという結果になりました。 しかし、実機では多少 01 や 10 の結果も含まれてしまっています。これは実機におけるゲート操作のエラーや測定の誤差に起因するものでしょう。 今回は QasmSimulator にノイズの設定をしなかったので、シミュレーター上では理想的な 00/11 のみの状態が再現されていました。 . まとめ . 今回はIBM Quantum ExperienceのマネージドJupyter NotebookサービスであるQuantum Lab上で量子回路を構築してみました。 . アダマールゲートとCNOTゲートを用いて、ベル状態のひとつ $( vert 00 rangle + vert 11 rangle)/ sqrt{2}$ を作る回路をQiskitで構築しました。 . シミュレーターと実機で測定をしたところ、出力はほとんど 00 もしくは 11 となり、期待された状態が得られていることがわかりました。 . least_busy 関数を用いることでIBMが提供する量子コンピューターのうち一番空いているものを取得する方法に関しても解説しました。 .",
            "url": "https://qosajin.github.io/qosamu-pages/qiskit/ibm/2021/08/29/bell-measurement-with-qiskit.html",
            "relUrl": "/qiskit/ibm/2021/08/29/bell-measurement-with-qiskit.html",
            "date": " • Aug 29, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://qosajin.github.io/qosamu-pages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://qosajin.github.io/qosamu-pages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://qosajin.github.io/qosamu-pages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://qosajin.github.io/qosamu-pages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}